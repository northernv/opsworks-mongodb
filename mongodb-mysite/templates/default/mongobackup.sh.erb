#!/bin/bash
#
# Argument = -u user -p password -k key -s secret -b bucket
#
# To Do - Add logging of output.
# To Do - Abstract bucket region to options

set -e

export PATH="$PATH:/usr/local/bin"

usage()
{
cat << EOF
usage: $0 options

This script dumps the current mongo database, tars it, then sends it to an Amazon S3 bucket.

OPTIONS:
   -h      Show this message
   -u      Mongodb user
   -p      Mongodb password
   -k      AWS Access Key
   -s      AWS Secret Key
   -r      Amazon S3 region
   -b      Amazon S3 bucket name
EOF
}

MONGODB_USER=''
MONGODB_PASSWORD=''
DB=test
S3_BUCKET=com-meijer-mperks-cms-backup
DIR=/tmp
DATE=$(date -u "+%a")


# If first day of the month, then store the month snapshot
if [ 01 = $(date -u "+%d") ]; then
  DATE=$(date -u "+%b");
fi
FILE_NAME="backup-$DATE"
ARCHIVE_NAME="$FILE_NAME.tar.gz"

# Lock the database
/usr/bin/mongo admin --eval "printjson(db.fsyncLock());"
# Dump the database
/usr/bin/mongodump --out $DIR/backup/$FILE_NAME

# Unlock the database
/usr/bin/mongo admin --eval "printjson(db.fsyncUnlock());"

# Tar Gzip the file
/bin/tar -C $DIR/backup/ -zcf $DIR/backup/$ARCHIVE_NAME $FILE_NAME/

# Remove the backup directory
rm -r $DIR/backup/$FILE_NAME

cd $DIR/backup/

# Send the file to the backup drive or S3
/usr/bin/s3cmd -c /root/.s3cfg put $ARCHIVE_NAME s3://$S3_BUCKET/mongobackups/$ARCHIVE_NAME

# Clear out /tmp/backup
rm -rf $DIR/backup/*
